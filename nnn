void render_gui()
{
    std::vector<std::string> fileNames;

    ImVec2 displaySize = ImGui::GetIO().DisplaySize;
    ImGui::SetNextWindowPos(ImVec2(10, 10));
    ImGui::SetNextWindowSize(ImVec2(displaySize.x - 20, displaySize.y - 20)); // Margines 10px z każdej strony

    ImGui::Begin("SYMULATOR POŻARÓW", nullptr, ImGuiWindowFlags_NoResize);

    CenteredSeparatorWithBackground("Zarządzanie danymi");
    ImGui::InputInt("Podaj rok, który brać pod uwagę", &wybrany_rok);
    ImGui::InputText("Podaj ścieżkę folderu z danymi wejściowymi", sciezka_input, 512);
    ImGui::InputText("Podaj ścieżkę folderu gdzie zapisać wyniki", gdzie_zapisac, 512);
    ImGui::SeparatorText("Wybór zapisu budynków");
    ImGui::RadioButton("Wszystkie budynki", &forma_zapisu_budynkow, 0);
    ImGui::SameLine();
    ImGui::RadioButton("Wybrane budynki", &forma_zapisu_budynkow, 1);
    ImGui::InputInt("Ilość budynków do zapisania", &ilosc_budynkow_do_zapisania);

    if (ImGui::Button("Wczytaj listę ubezpieczycieli", ImVec2(ImGui::GetContentRegionAvail().x, 25)))
    {
        ubezp_nazwy.clear();
        flagi.clear();
        std::string sciezka(sciezka_input);
        sciezka += "/Ubezpieczyciele";
        ubezp_nazwy = getFiles(sciezka);
        flagi.resize(ubezp_nazwy.size());
    }

    ImGui::BeginChild("ChildR", ImVec2(0, 140), ImGuiChildFlags_Border, ImGuiWindowFlags_NoScrollWithMouse | ImGuiWindowFlags_MenuBar);
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Wybierz ubezpieczycieli którzy mają brać udział w symulacji"))
        {
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }

    if (ImGui::BeginTable("split", 1, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))
    {
        ImGui::TableNextColumn();
        for (int i = 0; i < ubezp_nazwy.size(); i++)
        {
            ImGui::CheckboxFlags(ubezp_nazwy[i].c_str(), &flagi[i], ImGuiComboFlags_PopupAlignLeft);
        }
        ImGui::EndTable();
    }
    ImGui::EndChild();

    if (ImGui::Button("Wybierz wszystkich", ImVec2(ImGui::GetContentRegionAvail().x, 30)))
    {
        fileNames.clear();
        for (int i = 0; i < ubezp_nazwy.size(); i++)
        {
            flagi[i] = 1;
            if (flagi[i] != 0)
            {
                fileNames.push_back(ubezp_nazwy[i]);
            }
        }
    }

    CenteredSeparatorWithBackground("Paski postępu pracy poszczególnych wątków");
    ImGui::BeginChild("ChildL", ImVec2(0, 156), ImGuiChildFlags_Border, ImGuiWindowFlags_NoScrollWithMouse | ImGuiWindowFlags_MenuBar);
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Paski postępu pracy poszczególnych wątków"))
        {
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }
    
    if (ImGui::BeginTable("split", 1, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))
    {
        ImGui::TableNextColumn();
        for (int i = 1; i <= liczba_dzialajacych_watkow; i++)
        {
            ImGui::ProgressBar(progressbar[i - 1], ImVec2(0.f, 0.f));
            ImGui::SameLine();
            ImGui::Text("Wątek %02d", i);
        }
        ImGui::EndTable();
    }
    ImGui::EndChild();

    ImGui::End();
}
