# Załadowanie wymaganych pakietów
library(sf)
library(ggplot2)
library(dplyr)
library(officer)
library(rvg)
library(magrittr)
library(tidyr)

# Przykładowe dane wejściowe
df_pierwotny <- data.frame(
  Insurer = c(1, 1, 2, 4, 4, 1, 1, 4, 4, 3),
  IndexTable = c(1:10),
  Longitude = c(20.26020, 21.01883, 21.56013, 23.07727, 22.25857, 22.62083, 22.01630, 20.70184, 22.23082, 21.01273),
  Latitude = c(52.09687, 52.55047, 50.03683, 50.25996, 51.28710, 50.95545, 50.44800, 52.46030, 51.86314, 51.68400),
  Region = c(5, 3, 2, 4, 0, 4, 3, 5, 1, 2),
  Month = c(1, 10, 11, 0, 5, 9, 11, 5, 1, 0),
  ReasekuracjaF = rep(99999, 10),
  SumValue = c(64143, 447909, 162965, 412300, 415824, 59153, 127443, 276119, 298257, 363600),
  Szkoda = c(80569.964, 39040.568, 6658.599, 40422.845, 30277.949, 52830.542, 59607.293, 6057.123, 92623.759, 75329.933),
  SzkodaReas = c(64448.98, 82181.57, 42175.19, 24313.66, 2000.66, 20377.96, 71626.40, 98974.52, 62239.94, 42835.77)
)

df_rozprzestrzeniony <- data.frame(
  insurance = c(2, 2, 3, 1, 1, 1, 3, 1, 3, 3),
  IndexTable = c(1,2,2,2,2,3,3,3,4,2),
  Promien = c(43.568651, 35.425678, 26.637532, 29.710938, 2.642019, 15.320752, 16.438685, 7.951318, 10.683415, 45.324601),
  lat = c(50.99891, 51.27945, 50.95859, 51.79643, 51.39690, 51.49283, 50.44162, 51.55429, 51.09234, 53.64165),
  lon = c(21.35913, 21.26166, 21.00250, 21.43661, 20.19685, 21.10488, 21.50444, 21.30003, 21.39724, 20.88104),
  resurance = rep(99999, 10),
  SumValue = c(464586, 226881, 151468, 470701, 225505, 339095, 455908, 18013, 408771, 307083),
  WielkoscKwota = c(6951.3889, 988.9942, 3161.1213, 1311.8650, 4900.4220, 6958.2208, 7906.0136, 78770.3169, 4481.4025, 6031.4008),
  IndexTable = c(1,2,2,2,2,3,3,3,4,5),
  Region = c(1, 1, 4, 3, 1, 4, 1, 5, 2, 1),
  Month = c(8, 7, 8, 1, 1, 10, 2, 5, 4, 6),
  ReasonFire = c(3727.756, 9383.718, 2588.018, 3471.881, 9493.592, 8127.696, 8249.822, 4229.116, 4253.233, 1628.294)
)

# Pełne nazwy województw
wojewodztwa_labels <- c(
  "Nieznane", "Dolnośląskie", "Kujawsko-Pomorskie", "Lubelskie", "Łódzkie", "Lubuskie", 
  "Małopolskie", "Mazowieckie", "Opolskie", "Podkarpackie", "Podlaskie", "Pomorskie", 
  "Śląskie", "Świętokrzyskie", "Warmińsko-Mazurskie", "Wielkopolskie", "Zachodniopomorskie"
)

# Pełne nazwy miesięcy
miesiace_labels <- c("Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", 
                     "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień")





# Ładowanie pakietów
library(ggplot2)
library(officer)
set.seed(123)
df_input <- data.frame(
  Brutto = rnorm(100, mean = 7000, sd = 2000),      # Rozkład normalny
  Brutto_Kat = 500*runif(100, min = 1, max = 5),        # Rozkład jednostajny
  Netto = rlnorm(100, meanlog = 8, sdlog = 0.5),    # Rozkład log-normalny
  Netto_Kat = rexp(100, rate = 0.001)              # Rozkład wykładniczy
)
quantiles <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.995, 0.999)
df_quantiles <- as.data.frame(sapply(df_input, function(col) round(quantile(col, probs = quantiles, na.rm = TRUE))))
df_quantiles$Quantile <- quantiles
df_quantiles <- df_quantiles[, c(ncol(df_quantiles), 1:(ncol(df_quantiles)-1))]
df_quantiles["średnia",] <- c("srednia", round(mean(df_input$Brutto)), round(mean(df_input$Brutto_Kat)), round(mean(df_input$Netto)), round(mean(df_input$Netto_Kat)))
df_quantiles["odchylenie",] <- c("odchylenie", round(sd(df_input$Brutto)), round(sd(df_input$Brutto_Kat)), round(sd(df_input$Netto)), round(sd(df_input$Netto_Kat)))
df_quantiles["SCR",] <- c("SCR", round(quantile(df_input$Brutto, 0.995) - mean(df_input$Brutto)),
                          round(quantile(df_input$Brutto_Kat, 0.995) - mean(df_input$Brutto_Kat)),
                          round(quantile(df_input$Netto, 0.995) - mean(df_input$Netto)),
                          round(quantile(df_input$Netto_Kat, 0.995) - mean(df_input$Netto_Kat)))
quantiles <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.995, 0.999)
quantiles_values <- data.frame(
  Quantile = rep(quantiles, times = ncol(df_input)),
  Value = unlist(lapply(df_input, function(col) quantile(col, probs = quantiles, na.rm = TRUE))),
  Variable = rep(names(df_input), each = length(quantiles))
)
plot <- ggplot(quantiles_values, aes(x = Quantile, y = Value, color = Variable)) +
  geom_line() +
  labs(title = "",
       x = "Kwantyle",
       y = "Wartości kwantyli") +
  theme_minimal() +
  theme(legend.title = element_blank())
doc <- read_docx()
doc <- doc %>% 
  body_add_par("Tabela z Kwantylami oraz statystykami dla zmiennych", style = "heading 1")
doc <- doc %>% 
  body_add_table(df_quantiles, style = "table_template") 
doc <- doc %>% 
  body_add_par("Wykres Kwantyli dla każdej zmiennej", style = "heading 2")
ggsave("quantiles_plot.png", plot, width = 6, height = 4)  # Dostosowanie rozmiaru wykresu
doc <- doc %>% body_add_img(src = "quantiles_plot.png", width = 6, height = 4)
print(doc, target = "quantiles_report.docx")



df_pierwotny_sf <- st_as_sf(df_pierwotny, coords = c("Longitude", "Latitude"), crs = 4326)
df_rozprzestrzeniony_sf <- st_as_sf(df_rozprzestrzeniony, coords = c("lon", "lat"), crs = 4326)
df_all_sf <- bind_rows(df_pierwotny_sf, df_rozprzestrzeniony_sf)
wojewodztwa <- st_read("wojewodztwa.shp") %>%
  st_transform(crs = 4326)
 # Sprawdźmy, ile jest województw

df_all_sf_joined <- st_join(df_all_sf, wojewodztwa, join = st_intersects)
# Sprawdzamy dostępne kolumny w df_all_sf_joined
print(colnames(df_all_sf_joined))  # Powinno zawierać "JPT_NAZWA_"


# 1️⃣ Agregacja, zachowując JPT_NAZWA_
agregacja_df <- df_all_sf_joined %>%
  st_drop_geometry() %>%
  group_by(JPT_NAZWA_) %>%
  summarise(
    TotalBrutto = sum(Szkoda, na.rm = TRUE) + sum(WielkoscKwota, na.rm = TRUE),
    CountBrutto = sum(!is.na(Szkoda)) + sum(!is.na(WielkoscKwota)),
    AvgBrutto = ifelse(CountBrutto > 0, TotalBrutto / CountBrutto, NA),
    TotalNetto = sum(SzkodaReas, na.rm = TRUE) + sum(ReasonFire, na.rm = TRUE),
    CountNetto = sum(!is.na(SzkodaReas)) + sum(!is.na(ReasonFire)),
    AvgNetto = ifelse(CountNetto > 0, TotalNetto / CountNetto, NA)
  )

# 2️⃣ Sprawdzenie poprawności
print(colnames(agregacja_df))  # Powinno zawierać "JPT_NAZWA_"

agregacja <- wojewodztwa %>%
  left_join(agregacja_df, by = "JPT_NAZWA_") %>%
  replace_na(list(TotalBrutto = 0, AvgBrutto = 0, TotalNetto = 0, AvgNetto = 0)) %>%
  st_as_sf()

agregacja <- agregacja %>%
  mutate(geometry_centroid = st_point_on_surface(geometry)) 


# filter katastroficznej
prog_katastrofa <- 50000  # Możesz zmienić na dowolną wartość
df_suma <- df_pierwotny %>%
  inner_join(df_rozprzestrzeniony, by = c("IndexTable" = "IndexTable", "Insurer" = "insurance")) %>%
  group_by(IndexTable, Insurer) %>%
  summarise(SumaSzkoda = sum(Szkoda, na.rm = TRUE) + sum(WielkoscKwota, na.rm = TRUE), .groups = "drop")
df_katastrofa <- df_suma %>%
  filter(SumaSzkoda > prog_katastrofa)
df_brak_powiazan <- df_pierwotny %>%
  anti_join(df_rozprzestrzeniony, by = "IndexTable") %>%
  filter(Szkoda > prog_katastrofa)
df_pierwotny_powiazane <- df_pierwotny %>%
  semi_join(df_katastrofa, by = c("IndexTable", "Insurer"))
df_pierwotny_filter <- bind_rows(df_pierwotny_powiazane, df_brak_powiazan)
df_powiazania_inne_insurance <- df_pierwotny %>%
  inner_join(df_rozprzestrzeniony, by = "IndexTable") %>%
  filter(Insurer != insurance)  # Tylko przypadki, gdzie insurance ≠ Insurer
df_suma_insurance <- df_powiazania_inne_insurance %>%
  group_by(IndexTable, insurance) %>%
  summarise(SumaWielkoscKwota = sum(WielkoscKwota, na.rm = TRUE), .groups = "drop") %>%
  filter(SumaWielkoscKwota > prog_katastrofa)  # Sprawdzamy, czy suma przekracza próg
df_rozprzestrzeniony_filter <- df_rozprzestrzeniony %>%
  semi_join(df_katastrofa, by = c("IndexTable" = "IndexTable", "insurance" = "Insurer"))
df_rozprzestrzeniony_dodatkowe <- df_rozprzestrzeniony %>%
  semi_join(df_suma_insurance, by = c("IndexTable" = "IndexTable", "insurance" = "insurance"))
df_rozprzestrzeniony_filter <- bind_rows(df_rozprzestrzeniony_filter, df_rozprzestrzeniony_dodatkowe)
df_pierwotny_filter_sf <- st_as_sf(df_pierwotny_filter, coords = c("Longitude", "Latitude"), crs = 4326)
df_rozprzestrzeniony_filter_sf <- st_as_sf(df_rozprzestrzeniony_filter, coords = c("lon", "lat"), crs = 4326)

##
plot_brutto <- ggplot(agregacja) +
  geom_sf(aes(fill = AvgBrutto), color = "black", size = 0.4) +
  geom_sf(data = df_pierwotny_filter_sf, color = "blue", size = 1.5, alpha = 0.8) +  # Punkty z pierwotnego
  geom_text(data = st_centroid(agregacja) %>% st_coordinates() %>% as.data.frame() %>%
              rename(X = X, Y = Y) %>%
              cbind(agregacja %>% st_drop_geometry()), 
            aes(x = X, y = Y, label = round(AvgBrutto, 2)),
            size = 3, color = "black", fontface = "bold") +
  scale_fill_gradientn(colors = c("#FFFFCC", "#FFEB99", "#FFCC99", "#FFCC00", "#FF6600", "#CC0000"), 
                       name = "Średnia strata") +
  labs(title = "") +
  theme_minimal()

plot_netto <- ggplot(agregacja) +
  geom_sf(aes(fill = AvgNetto), color = "black", size = 0.4) +
  geom_sf(data = df_pierwotny_filter_sf, color = "blue", size = 1.5, alpha = 0.8) +  # Punkty z pierwotnego
  geom_text(data = st_centroid(agregacja) %>% st_coordinates() %>% as.data.frame() %>%
              rename(X = X, Y = Y) %>%
              cbind(agregacja %>% st_drop_geometry()), 
            aes(x = X, y = Y, label = round(AvgNetto, 2)),
            size = 3, color = "black", fontface = "bold") +
  scale_fill_gradientn(colors = c("#FFFFCC", "#FFEB99", "#FFCC99", "#FFCC00", "#FF6600", "#CC0000"), 
                       name = "Średnia strata") +
  labs(title = "") +
  theme_minimal()

## mapa ciepla szkod
df_brutto <- df_pierwotny %>%
  rename(Strata = Szkoda) %>%
  mutate(Typ = "Pierwotny") %>%
  bind_rows(df_rozprzestrzeniony %>%
              rename(Strata = WielkoscKwota) %>%
              mutate(Typ = "Rozprzestrzeniony")) %>%
  full_join(expand.grid(Region = 0:16, Month = 0:11), by = c("Region", "Month"))
heatmap_brutto <- df_brutto %>%
  group_by(Region, Month) %>%
  summarise(Srednia_Strata = mean(Strata, na.rm = TRUE)) %>%
  ungroup()
heatmap_brutto$Region <- factor(heatmap_brutto$Region, levels = 0:16, labels = wojewodztwa_labels)
heatmap_brutto$Month <- factor(heatmap_brutto$Month, levels = 0:11, labels = miesiace_labels)
heatmap_brutto$Srednia_Strata <- round(heatmap_brutto$Srednia_Strata)  
heatmap_brutto <- heatmap_brutto %>%
  mutate(Label = ifelse(Srednia_Strata == 0, "", as.character(Srednia_Strata)))
brutto_min <- floor(min(heatmap_brutto$Srednia_Strata, na.rm = TRUE))
brutto_max <- ceiling(max(heatmap_brutto$Srednia_Strata, na.rm = TRUE))
brutto_breaks <- seq(brutto_min, brutto_max, length.out = 10)
plot_brutto_ciepla <- ggplot(heatmap_brutto, aes(x = Month, y = Region, fill = Srednia_Strata)) +
  geom_tile(aes(fill = ifelse(Srednia_Strata == 0, NA, Srednia_Strata)), color = "black", size = 0.4) +
  scale_fill_gradientn(
    colours = c("white","#FFFFCC", "#FFEB99", "#FFCC99", "#FFCC00", "#FF6600", "#CC0000"),
    values = scales::rescale(brutto_breaks),
    name = "Średnia",
    breaks = round(brutto_breaks),
    labels = as.integer(round(brutto_breaks)),
    na.value = "white"
  ) +
  geom_text(aes(label = Label), color = "black", size = 1.8, na.rm = TRUE) +  # 🔹 Eliminacja ostrzeżenia
  labs(title = "",
       x = "Miesiąc",
       y = "Województwo") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, face = "italic", size = 9),
    axis.text.y = element_text(size = 9),
    panel.grid = element_blank(),
    aspect.ratio = 0.8
  )
df_netto <- df_pierwotny %>%
  rename(Strata = SzkodaReas) %>%
  mutate(Typ = "Pierwotny") %>%
  bind_rows(df_rozprzestrzeniony %>%
              rename(Strata = ReasonFire) %>%
              mutate(Typ = "Rozprzestrzeniony")) %>%
  full_join(expand.grid(Region = 0:16, Month = 0:11), by = c("Region", "Month"))

heatmap_netto <- df_netto %>%
  group_by(Region, Month) %>%
  summarise(Srednia_Strata = mean(Strata, na.rm = TRUE)) %>%
  ungroup()

heatmap_netto$Region <- factor(heatmap_netto$Region, levels = 0:16, labels = wojewodztwa_labels)
heatmap_netto$Month <- factor(heatmap_netto$Month, levels = 0:11, labels = miesiace_labels)
heatmap_netto$Srednia_Strata <- round(heatmap_netto$Srednia_Strata)

heatmap_netto <- heatmap_netto %>%
  mutate(Label = ifelse(Srednia_Strata == 0, "", as.character(Srednia_Strata)))

netto_min <- floor(min(heatmap_netto$Srednia_Strata, na.rm = TRUE))
netto_max <- ceiling(max(heatmap_netto$Srednia_Strata, na.rm = TRUE))
netto_breaks <- seq(netto_min, netto_max, length.out = 10)

plot_netto_ciepla <- ggplot(heatmap_netto, aes(x = Month, y = Region, fill = Srednia_Strata)) +
  geom_tile(aes(fill = ifelse(Srednia_Strata == 0, NA, Srednia_Strata)), color = "black", size = 0.3) +
  scale_fill_gradientn(
    colours = c("white","#FFFFCC", "#FFEB99", "#FFCC99", "#FFCC00", "#FF6600", "#CC0000"),
    values = scales::rescale(netto_breaks),
    name = "Średnia",
    breaks = round(netto_breaks),
    labels = as.integer(round(netto_breaks)),
    na.value = "white"
  ) +
  geom_text(aes(label = Label), color = "black", size = 1.5, na.rm = TRUE) +  # 🔹 Eliminacja ostrzeżenia
  labs(title = "",
       x = "Miesiąc",
       y = "Województwo") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, face = "italic", size = 9),
    axis.text.y = element_text(size = 9),
    panel.grid = element_blank(),
    aspect.ratio = 0.8
  )
text_1<-paste0("333","W tej tabeli przedstawiono wartości kwantyli oraz podstawowe statystyki dla każdej zmiennej, takich jak średnia, odchylenie standardowe oraz SCR.")

doc <- read_docx() %>%
  body_add_par("Raport średnich strat pożarowych", style = "heading 1") %>%
  body_add_par("Tabela z Kwantylami oraz statystykami dla zmiennych", style = "heading 2") %>%
  body_add_par(text_1, style = "Normal") %>%
  body_add_table(df_quantiles, style = "table_template") %>%
  body_add_par("Wykres Kwantyli dla każdej zmiennej", style = "heading 2") %>%
  body_add_img(src = "quantiles_plot.png", width = 6, height = 4) %>%
  body_add_par("Mapa średnich strat brutto", style = "heading 2") %>%
  body_add_gg(plot_brutto, width = 7, height = 4) %>%
  body_add_par("Mapa średnich strat netto", style = "heading 2") %>%
  body_add_gg(plot_netto, width = 7, height = 4)%>%
  body_add_par("Mapa średnich strat", style = "heading 2") %>%
  body_add_gg(plot_brutto_ciepla, width = 7, height = 4) %>%
  body_add_par("Mapa średnich strat", style = "heading 2") %>%
  body_add_gg(plot_netto_ciepla, width = 7, height = 4)

# Zapisujemy dokument
print(doc, target = "raport_straty_pozarowe.docx")

cat("✅ Dokument 'raport_straty_pozarowe.docx' został pomyślnie wygenerowany! 🚀")



agregacja <- agregacja %>%
  mutate(Quantile = ntile(AvgBrutto, 5))  # Creating 5 quantiles for AvgBrutto

# Plot with quantiles for color scale
plot_brutto <- ggplot(agregacja) +
  geom_sf(aes(fill = factor(Quantile)), color = "black", size = 0.4) +
  geom_sf(data = df_pierwotny_filter_sf, color = "blue", size = 1.5, alpha = 0.8) +  # Points from the original dataset
  geom_text(data = st_centroid(agregacja) %>% st_coordinates() %>% as.data.frame() %>%
              rename(X = X, Y = Y) %>%
              cbind(agregacja %>% st_drop_geometry()), 
            aes(x = X, y = Y, label = round(AvgBrutto, 2)),
            size = 3, color = "black", fontface = "bold") +
  scale_fill_manual(
    values = c("#FFF9C4", "#FFEB3B", "#FF9800", "#FF5722", "#D32F2F"),  # Manually assign colors to quantiles
    name = "Średnia strata",
    labels = c(
      paste("Q1: <", round(min(agregacja$AvgBrutto))),
      paste("Q2: [", round(quantile(agregacja$AvgBrutto, 0.2)), ",", round(quantile(agregacja$AvgBrutto, 0.4)), "]", sep = ""),
      paste("Q3: [", round(quantile(agregacja$AvgBrutto, 0.4)), ",", round(quantile(agregacja$AvgBrutto, 0.6)), "]", sep = ""),
      paste("Q4: [", round(quantile(agregacja$AvgBrutto, 0.6)), ",", round(quantile(agregacja$AvgBrutto, 0.8)), "]", sep = ""),
      paste("Q5: >=", round(quantile(agregacja$AvgBrutto, 0.8)))
    )
  ) +
  labs(title = "") +
  theme_minimal()


df_powiazania_index_rozny <- df_pierwotny %>%
  inner_join(df_rozprzestrzeniony, by = c("Insurer" = "insurance")) %>%
  filter(IndexTable.x != IndexTable.y) %>%  # IndexTable różne
  group_by(IndexTable.x, Insurer) %>%
  summarise(
    LiczbaPowiazan = n(),  # Liczba wystąpień IndexTable.x
    SumaWielkoscKwota = sum(WielkoscKwota, na.rm = TRUE),  # Sumujemy WielkoscKwota
    .groups = "drop"
  ) %>%
  filter(SumaWielkoscKwota > prog_katastrofa) 
