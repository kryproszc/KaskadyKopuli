library(shiny)
library(shinycssloaders)

# UI
ui <- fluidPage(
  actionButton("loadData", "Załaduj dane"),
  
  # Miejsce na spinner i dane
  withSpinner(textOutput("status"))
)

# Serwer
server <- function(input, output, session) {
  
  observeEvent(input$loadData, {
    # Pokazujemy spinner podczas wczytywania danych
    output$status <- renderText({
      "Trwa wczytywanie danych..."
    })
    
    # Użycie withProgress do obsługi długotrwałego procesu
    withProgress(message = "Wczytywanie danych...", value = 0, {
      # Symulacja operacji wczytywania danych
      Sys.sleep(3)  # 3 sekundy opóźnienia na symulację wczytywania danych
      incProgress(1, detail = "Przetwarzanie danych...")
      
      # Wczytanie plików CSV (przykład z Twojego kodu)
      primary_fire_path <- file.path("ścieżka/do/folderu", "Pierwotny.csv")
      spread_fire_path <- file.path("ścieżka/do/folderu", "Rozprzestrzeniony.csv")
      
      # Sprawdzenie, czy pliki istnieją i ich wczytanie
      if (file.exists(primary_fire_path)) {
        primary_fire_df <- read.csv(primary_fire_path, sep = ",", dec = ".")
        incProgress(0.5, detail = "Przetwarzanie pliku Pierwotny")
        
        # Dalsze operacje na wczytanym pliku
        # (np. zamiana kolumn, obliczenia)
      } else {
        showNotification("Plik Pierwotny.csv nie istnieje!", type = "error")
      }
      
      if (file.exists(spread_fire_path)) {
        spread_fire_df <- read.csv(spread_fire_path, sep = ",", dec = ".")
        incProgress(0.5, detail = "Przetwarzanie pliku Rozprzestrzeniony")
        
        # Dalsze operacje na wczytanym pliku
      } else {
        showNotification("Plik Rozprzestrzeniony.csv nie istnieje!", type = "error")
      }
      
      # Po zakończeniu operacji zmiana tekstu
      output$status <- renderText({
        "Dane zostały wczytane i przetworzone!"
      })
    })
  })
}

# Uruchomienie aplikacji
shinyApp(ui, server)
