results_a = np.zeros(simTotal)
results_b = np.zeros(simTotal)

with mp.Pool(processes=num_cores) as pool, tqdm(total=simTotal, desc="Postęp symulacji") as pbar:
    sim_done = 0

    for b in range(nBatches):
        start_b = sim_done
        end_b = min(sim_done + batch_size, simTotal)
        current_batch_size = end_b - start_b

        # Generowanie parametrów dla batcha
        mu_part, sigma_part = random_stochastic_parameters(sigma_j, dev, sd, mm, current_batch_size, main_seed + b)

        # Przygotowanie argumentów dla process_row
        args = [(i, mu_part, sigma_part, data_paid, Ultimate_Param_ReservingRisk, main_seed + b) for i in range(current_batch_size)]
        
        # Uruchomienie równoległych procesów
        batch_out = pool.starmap(process_row, args)

        # Rozdzielenie wyników
        batch_results_a, batch_results_b = zip(*batch_out)
        
        results_a[start_b:end_b] = batch_results_a
        results_b[start_b:end_b] = batch_results_b
        
        sim_done = end_b
        pbar.update(current_batch_size)

print(f"===> Wykonano łącznie {sim_done} symulacji w {nBatches} partiach.")
