library(shiny)
library(DT)  # Do obsługi dynamicznych tabel

# Funkcja do obliczania kwantyli dla danych
calculate_quantiles <- function(data) {
  quantile_values <- seq(0, 1, by = 0.1)
  quantiles <- sapply(quantile_values, function(q) quantile(data, probs = q, na.rm = TRUE))
  return(quantiles)
}

# Załaduj dane ubezpieczycieli
loaded_data <- list(
  AXA = data.frame(Brutto = 300*rnorm(1000), Netto = 300*rnorm(1000)),
  PZU = data.frame(Brutto = 500*rnorm(1000), Netto = 500*rnorm(1000))
)

# Załaduj dane porównania SF/IM
loaded_data_porownanie <- data.frame(
  Ubezpieczyciel = c("AXA", "PZU"),
  Brutto = c(300, 500),
  Netto = c(300, 500)
)

# Funkcja do formatowania liczb jako całkowite
format_numbers <- function(x) {
  return(formatC(round(x), format = "f", big.mark = " "))  # Zaokrąglamy liczbę do całkowitej przed formatowaniem
}

# UI aplikacji Shiny
ui <- fluidPage(
  titlePanel("Tabela Kwantyli - Ubezpieczyciele"),
  
  sidebarLayout(
    sidebarPanel(
      uiOutput("column_selector"),   # Dynamiczny wybór kolumny do analizy
      actionButton("generate_table", "Generuj Tabelę Kwantyli") # Przycisk generowania tabeli
    ),
    
    mainPanel(
      tabsetPanel(
        # Główna zakładka "Tabela Kwantyli"
        tabPanel("Tabela Kwantyli", 
                 DTOutput("quantile_table")),  # Dynamiczna tabela kwantyli
        
        # Zakładka "Porównanie SF/IM"
        tabPanel("Porównanie SF/IM", 
                 h3("Porównanie SF/IM"), 
                 p("Tutaj możesz dodać wykresy lub inne dane dotyczące porównania SF/IM.")),  # Zakładka porównawcza
        
        # Nowa zakładka do obliczania różnic
        tabPanel("Różnice Kwantyl 0.995 - Średnia", 
                 DTOutput("diff_table"))  # Tabela z różnicami
      )
    )
  )
)

# Server aplikacji Shiny
server <- function(input, output, session) {
  
  # Dynamiczne generowanie wyboru kolumny w zależności od wybranego ubezpieczyciela
  output$column_selector <- renderUI({
    # Listowanie wszystkich dostępnych kolumn dla ubezpieczycieli
    colnames <- unique(unlist(lapply(loaded_data, colnames)))
    selectInput("column", "Wybierz kolumnę do analizy:", choices = colnames)
  })
  
  # Funkcja generująca tabelę kwantyli
  observeEvent(input$generate_table, {
    selected_column <- input$column
    
    # Przechowujemy kwantyle dla wszystkich ubezpieczycieli
    quantiles_data <- data.frame(Ubezpieczyciel = character(), stringsAsFactors = FALSE)
    
    for (insurer in names(loaded_data)) {
      # Pobieramy dane z wybranej kolumny dla każdego ubezpieczyciela
      data <- loaded_data[[insurer]][[selected_column]]
      
      # Obliczamy kwantyle
      quantiles <- calculate_quantiles(data)
      
      # Dodajemy kwantyle do tabeli
      quantiles_data <- rbind(quantiles_data, data.frame(Ubezpieczyciel = insurer, t(quantiles)))
    }
    
    # Ustawiamy odpowiednie nazwy kolumn
    colnames(quantiles_data)[2:ncol(quantiles_data)] <- paste0("Q", seq(0, 1, by = 0.1))
    
    # Formatujemy wartości liczbowe w tabeli
    quantiles_data[2:ncol(quantiles_data)] <- lapply(quantiles_data[2:ncol(quantiles_data)], function(x) format_numbers(as.numeric(x)))
    
    # Wyświetlanie tabeli
    output$quantile_table <- renderDT({
      datatable(quantiles_data, options = list(pageLength = 10))
    })
  })
  
  # Funkcja do obliczania różnicy pomiędzy kwantylem 0.995 a średnią
  observeEvent(input$generate_table, {
    diff_data <- data.frame(Ubezpieczyciel = character(), Brutto = numeric(), Netto = numeric(), Różnice_Brutto = numeric(), Różnice_Netto = numeric(), stringsAsFactors = FALSE)
    
    for (insurer in names(loaded_data)) {
      # Pobieramy dane dla każdego ubezpieczyciela
      data_brutto <- loaded_data[[insurer]]$Brutto
      data_netto <- loaded_data[[insurer]]$Netto
      
      # Obliczamy kwantyl 0.995 i średnią
      quantile_brutto <- quantile(data_brutto, probs = 0.995, na.rm = TRUE)
      quantile_netto <- quantile(data_netto, probs = 0.995, na.rm = TRUE)
      
      mean_brutto <- mean(data_brutto, na.rm = TRUE)
      mean_netto <- mean(data_netto, na.rm = TRUE)
      
      # Obliczamy różnicę
      diff_brutto <- quantile_brutto - mean_brutto
      diff_netto <- quantile_netto - mean_netto
      
      # Dodajemy do tabeli
      diff_data <- rbind(diff_data, data.frame(Ubezpieczyciel = insurer, Brutto = quantile_brutto, Netto = quantile_netto, Różnice_Brutto = (loaded_data_porownanie$Brutto[loaded_data_porownanie$Ubezpieczyciel == insurer] - diff_brutto) / loaded_data_porownanie$Brutto[loaded_data_porownanie$Ubezpieczyciel == insurer], Różnice_Netto = (loaded_data_porownanie$Netto[loaded_data_porownanie$Ubezpieczyciel == insurer] - diff_netto) / loaded_data_porownanie$Netto[loaded_data_porownanie$Ubezpieczyciel == insurer]))
    }
    
    # Formatujemy tabelę
    diff_data$Różnice_Brutto <- sapply(diff_data$Różnice_Brutto, function(x) round(x,2))
    diff_data$Różnice_Netto <- sapply(diff_data$Różnice_Netto, function(x) round(x,1))
    
    # Wyświetlanie tabeli z różnicami
    output$diff_table <- renderDT({
      datatable(diff_data, options = list(pageLength = 10))
    })
  })
}

# Uruchomienie aplikacji
shinyApp(ui = ui, server = server)
