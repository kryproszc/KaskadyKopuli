#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <utility>
#include <sstream>

#include "csvstream.hpp"

namespace fs = std::filesystem;

fs::path path = "/mnt/c/Users/szczkr/test"; // Zmień na ścieżkę do katalogu z plikami CSV

struct Address
{
    std::string lp;
    std::string dataPoczatku;
    std::string dataKonca;
    std::string sumaUbezpieczenia;
    std::string odnowienia;
    std::string ulica;
    std::string kodPocztowy;
    std::string miasto;
    std::string wojewodztwo;
    std::string kraj;
    std::string reasekuracjaO;
    std::string reasekuracjaF;
    std::string szerokosc; // Latitude
    std::string dlugosc;   // Longitude
    std::string flaga1;
    std::string flaga2;
    std::string nrwoj;
};

std::string removeLastChar(const std::string &line)
{
    if (!line.empty())
    {
        return line.substr(0, line.size() - 1);
    }
    return line;
}

std::vector<fs::path> getCsvFiles(const fs::path &path)
{
    std::vector<fs::path> csvFiles;
    for (const auto &entry : fs::recursive_directory_iterator(path))
    {
        if (entry.is_regular_file() && entry.path().extension() == ".csv" &&
            entry.path().stem().string().find("_final") == std::string::npos)
        {
            csvFiles.push_back(entry.path());
        }
    }
    return csvFiles;
}

int main()
{
    std::vector<Address> allAddresses;

    // Wczytywanie plików CSV
    std::vector<fs::path> csvFiles = getCsvFiles(path);

    for (const auto &filePath : csvFiles)
    {
        std::cout << "Wczytywanie pliku: " << filePath.string() << std::endl;

        std::ifstream file(filePath);
        if (file.is_open())
        {
            std::string line;
            bool isFirstLine = true;
            while (std::getline(file, line))
            {
                if (isFirstLine)
                {
                    isFirstLine = false; // Pomijamy nagłówek
                    continue;
                }
                else
                {
                    line = removeLastChar(line); // Usuwamy ewentualne znaki końca linii
                    std::istringstream iss(line);
                    std::string token;
                    std::vector<std::string> tokens;

                    while (std::getline(iss, token, ';'))
                    {
                        tokens.push_back(token);
                    }

                    if (tokens.size() >= 17)
                    {
                        Address addr;
                        addr.lp = tokens[0];
                        addr.dataPoczatku = tokens[1];
                        addr.dataKonca = tokens[2];
                        addr.sumaUbezpieczenia = tokens[3];
                        addr.odnowienia = tokens[4];
                        addr.ulica = tokens[5];
                        addr.kodPocztowy = tokens[6];
                        addr.miasto = tokens[7];
                        addr.wojewodztwo = tokens[8];
                        addr.kraj = tokens[9];
                        addr.reasekuracjaO = tokens[10];
                        addr.reasekuracjaF = tokens[11];
                        addr.szerokosc = tokens[12];
                        addr.dlugosc = tokens[13];
                        addr.flaga1 = tokens[14];
                        addr.flaga2 = tokens[15];
                        addr.nrwoj = tokens[16];

                        allAddresses.push_back(addr);
                    }
                    else
                    {
                        std::cerr << "Nieprawidłowy format linii w pliku " << filePath.string() << ": " << line << std::endl;
                    }
                }
            }
            file.close();
        }
        else
        {
            std::cerr << "Nie można otworzyć pliku: " << filePath.string() << std::endl;
        }
    }

    // Wykrywanie duplikatów par (szerokosc, dlugosc)
    std::map<std::pair<std::string, std::string>, int> coordCount;
    int totalDuplicates = 0;

    for (const auto &addr : allAddresses)
    {
        auto coord = std::make_pair(addr.szerokosc, addr.dlugosc);
        coordCount[coord]++;
    }

    for (const auto &entry : coordCount)
    {
        if (entry.second > 1)
        {
            totalDuplicates += (entry.second - 1);
        }
    }

    std::cout << "Łączna liczba rekordów: " << allAddresses.size() << std::endl;
    std::cout << "Liczba unikalnych par (szerokosc, dlugosc): " << coordCount.size() << std::endl;
    std::cout << "Liczba powtarzających się par (szerokosc, dlugosc): " << totalDuplicates << std::endl;

    return 0;
}
