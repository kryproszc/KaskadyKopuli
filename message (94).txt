void processData()
{
    auto start = std::chrono::high_resolution_clock::now();
    pqxx::connection c(
        "dbname=twoja_baza user=twoj_uzytkownik password=twoje_haslo host=localhost port=5432");
    pqxx::work txn(c);
    std::cout << "Połączono z bazą danych: " << c.dbname() << '\n';

    std::stringstream query;

    // Nowe zapytanie SQL pobierające losowe adresy z całej tabeli
    query << "SELECT DISTINCT \n"
          << "    postcode, address,\n"
          << "    ST_Y(ST_Centroid(centroid)) AS lat,\n"
          << "    ST_X(ST_Centroid(centroid)) AS lon\n"
          << "FROM \n"
          << "    placex\n"
          << "WHERE \n"
          << "    address -> 'housenumber' IS NOT NULL AND \n"
          << "    address -> 'housenumber' != ''\n"
          << "ORDER BY RANDOM()\n"
          << "LIMIT " << numberOfDataPoints << ";\n";

    logProgress("Generowanie danych...");
    pqxx::result r = txn.exec(query);

    max_num_generated_data = r.size();

    for (const auto &row : r)
    {
        std::string city, street, postcode, housenumber, place;

        // Parsowanie pola 'address' jako JSON
        std::string address_field = row["address"].c_str();
        postcode = row["postcode"].c_str();
        double lat = row["lat"].as<double>();
        double lon = row["lon"].as<double>();

        json address_json = json::parse(address_field);

        if (address_json.contains("city"))
            city = address_json["city"].get<std::string>();
        else if (address_json.contains("town"))
            city = address_json["town"].get<std::string>();
        else if (address_json.contains("village"))
            city = address_json["village"].get<std::string>();
        else if (address_json.contains("hamlet"))
            city = address_json["hamlet"].get<std::string>();

        if (address_json.contains("street"))
            street = address_json["street"].get<std::string>();

        if (address_json.contains("housenumber"))
            housenumber = address_json["housenumber"].get<std::string>();

        if (address_json.contains("place"))
            place = address_json["place"].get<std::string>();

        if (city.empty())
            city = place;

        addGeneratedData(Address{"", "", "", "", "", street + " " + housenumber, postcode, city, "",
                                 "", "", "", std::to_string(lat), std::to_string(lon), "", "", ""});

        num_generated_data++;
    }
    logProgress("Generowanie danych zakończone.");

    // Reszta funkcji pozostaje bez zmian
    // ...

}
