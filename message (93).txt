std::vector<std::vector<std::vector<double>>> calc_brutto_ring(std::vector<double> data_input,
    std::vector<double> insurance, std::vector<double> reas_input, double kat_val, int ilosc_ubezpieczycieli)
{
    std::vector<std::vector<std::vector<double>>> out_final(8);
    std::vector<std::vector<double>> out_brutto(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> out_kat_brutto(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> ind_brutto(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> ind_kat_brutto(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> out_sum_brutto(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> out_sum_kat_brutto(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> out_reas_standard(ilosc_ubezpieczycieli);
    std::vector<std::vector<double>> out_reas_kat(ilosc_ubezpieczycieli);

    int ind_next = 0;

    for (auto it = std::begin(insurance); it != std::end(insurance); ++it)
    {
        out_brutto[*it].push_back(data_input[ind_next]);
        ind_brutto[*it].push_back(ind_next);
        out_reas_standard[*it].push_back(reas_input[ind_next]);
        if (data_input[ind_next] > kat_val)
        {
            out_kat_brutto[*it].push_back(data_input[ind_next]);
            ind_kat_brutto[*it].push_back(ind_next);
            out_reas_kat[*it].push_back(reas_input[ind_next]);
        }
        ind_next += 1;
    }
    for (int i = 0; i < ilosc_ubezpieczycieli; i++)
    {
        double sum_brutto = accumulate(out_brutto[i].begin(), out_brutto[i].end(), 0.0);
        double sum_kat_brutto = accumulate(out_kat_brutto[i].begin(), out_kat_brutto[i].end(), 0.0);
        out_sum_brutto[i].push_back(sum_brutto);
        out_sum_kat_brutto[i].push_back(sum_kat_brutto);
    }
    out_final[0] = out_brutto;
    out_final[1] = out_kat_brutto;
    out_final[2] = out_sum_brutto;
    out_final[3] = out_sum_kat_brutto;
    out_final[4] = ind_brutto;
    out_final[5] = ind_kat_brutto;
    out_final[6] = out_reas_standard;
    out_final[7] = out_reas_kat;
    return (out_final);
}
