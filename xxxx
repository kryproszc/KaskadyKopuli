#include <pqxx/pqxx>
#include <future>
#include <random>
#include <iostream>
#include <filesystem>
#include <vector>
#include <fstream>
#include <string>
#include <utility>
#include <map>
#include <ostream>
#include <set>
#include "csvstream.hpp"
  
namespace fs = std::filesystem;

fs::path path = "/mnt/c/Users/szczkr/test";

int numberOfDataPoints = 2000000;
size_t numThreads = 32; 

struct FileInfo
{
    fs::path path;
    size_t startIndex;
    size_t lineCount;
};

namespace Color {
    enum Code {
        FG_RED      = 31,
        FG_GREEN    = 32,
        FG_YELLOW   = 33,
        FG_BLUE     = 34,
        FG_MAGENTA  = 35,
        FG_CYAN     = 36,
        FG_WHITE    = 37,
        FG_DEFAULT  = 39,
        BG_RED      = 41,
        BG_GREEN    = 42,
        BG_YELLOW   = 43,
        BG_BLUE     = 44,
        BG_MAGENTA  = 45,
        BG_CYAN     = 46,
        BG_WHITE    = 47,
        BG_DEFAULT  = 49
    };
    class Modifier {
        Code code;
    public:
        Modifier(Code pCode) : code(pCode) {}
        friend std::ostream&
        operator<<(std::ostream& os, const Modifier& mod) {
            return os << "\033[" << mod.code << "m";
        }
    };
}

Color::Modifier red(Color::FG_RED);
Color::Modifier def(Color::FG_DEFAULT);
Color::Modifier green(Color::FG_GREEN);
Color::Modifier blue(Color::FG_BLUE);
Color::Modifier yellow(Color::FG_YELLOW);
Color::Modifier magneta(Color::FG_MAGENTA);
Color::Modifier cyan(Color::BG_CYAN);
Color::Modifier deff(Color::BG_DEFAULT);

void logProgress(const std::string& message) {
    std::cout << red << "[INFO] " << def << message << std::endl;
}

std::string removeLastChar(const std::string &line)
{
    if (!line.empty())
    {
        return line.substr(0, line.size() - 1);
    }
    return line;
}

std::vector<fs::path> getCsvFiles(const fs::path &path)
{
    std::vector<fs::path> csvFiles;
    for (const auto &entry : fs::recursive_directory_iterator(path))
    {
        if (entry.is_regular_file() && entry.path().extension() == ".csv" &&
            entry.path().stem().string().find("_final") == std::string::npos)
        {
            csvFiles.push_back(entry.path());
        }
    }
    return csvFiles;
}

struct Address
{
    std::string lp;
    std::string dataPoczatku;
    std::string dataKonca;
    std::string sumaUbezpieczenia;
    std::string odnowienia;
    std::string ulica;
    std::string kodPocztowy;
    std::string miasto;
    std::string wojewodztwo;
    std::string kraj;
    std::string reasekuracjaO;
    std::string reasekuracjaF;
    std::string szerokosc;
    std::string dlugosc;
    std::string flaga1;
    std::string flaga2;
    std::string nrwoj;

    std::string toString() const
    {
        return lp + ";" + dataPoczatku + ";" + dataKonca + ";" + sumaUbezpieczenia + ";" +
               odnowienia + ";" + ulica + ";" + kodPocztowy + ";" + miasto + ";" +
               wojewodztwo + ";" + kraj + ";" + reasekuracjaO + ";" + reasekuracjaF + ";" +
               szerokosc + ";" + dlugosc + ";" + flaga1 + ";" + flaga2 + ";" + nrwoj;
    }
};

std::vector<Address> toProcess;
std::vector<Address> generatedData;

std::vector<int> findDuplicateCoordinates(const std::vector<Address> &toProcess)
{
    std::map<std::pair<std::string, std::string>, std::set<int>> coordMap;
    std::vector<int> duplicateIndices;

    for (int i = 0; i < toProcess.size(); ++i)
    {
        const auto &address = toProcess[i];
        if ((address.szerokosc == "brak danych" || address.flaga1 == "0" || address.flaga1 == "4" || address.flaga1 == "5" || address.flaga1 == "6") ||
            ((address.flaga1 == "1" || address.flaga1 == "2" || address.flaga1 == "3") && address.flaga2 != "0"))
        {
            std::pair<std::string, std::string> coord(address.szerokosc, address.dlugosc);
            coordMap[coord].insert(i);
        }
    }

    for (const auto &entry : coordMap)
    {
        if (entry.second.size() > 1)
        {
            duplicateIndices.insert(duplicateIndices.end(), entry.second.begin(), entry.second.end());
        } else if(entry.second.size() == 1) {
            int firstIndex = *entry.second.begin();
            if(toProcess[firstIndex].szerokosc == "brak danych")
                duplicateIndices.insert(duplicateIndices.end(), entry.second.begin(), entry.second.end());
        }
    }

    return duplicateIndices;
}

void add(const Address &pos)
{
    toProcess.push_back(pos);
}

void addGeneratedData(const Address &pos)
{
    generatedData.push_back(pos);
}

std::pair<std::string, int> getWojewodztwoMapa(const std::string &kodPocztowy)
{
    int kod;
    try
    {
        kod = std::stoi(kodPocztowy.substr(0, 2)) * 1000;
    }
    catch (const std::invalid_argument &e)
    {
        return {"Nieznane województwo", 0};
    }
    catch (const std::out_of_range &e)
    {
        return {"Nieznane województwo", 0};
    }

    std::map<std::string, std::pair<int, int>> wojewodztwa = {
        {"Dolnośląskie", {50000, 59999}},
        {"Kujawsko-Pomorskie", {85000, 89999}},
        {"Lubelskie", {20000, 23999}},
        {"Lubuskie", {65000, 69999}},
        {"Łódzkie", {90000, 99999}},
        {"Małopolskie", {30000, 34999}},
        {"Mazowieckie", {0, 9999}},
        {"Opolskie", {45000, 49999}},
        {"Podkarpackie", {35000, 39999}},
        {"Podlaskie", {15000, 19999}},
        {"Pomorskie", {80000, 84999}},
        {"Śląskie", {40000, 44999}},
        {"Świętokrzyskie", {25000, 29999}},
        {"Warmińsko-Mazurskie", {10000, 14999}},
        {"Wielkopolskie", {60000, 64999}},
        {"Zachodniopomorskie", {70000, 78999}}};

    int numer = 1;
    for (const auto &woj : wojewodztwa)
    {
        if (kod >= woj.second.first && kod <= woj.second.second)
        {
            return {woj.first, numer};
        }
        ++numer;
    }

    return {"Nieznane województwo", 0};
}



void processChunk(const std::vector<Address>& generatedData, const std::vector<Address>& toProcess, 
                  std::vector<Address>& localResult, size_t start, size_t end) {
    for (size_t i = start; i < end; ++i) {
        bool shouldErase = false;
        for (const auto &process : toProcess) {
            if (generatedData[i].szerokosc == process.szerokosc && generatedData[i].dlugosc == process.dlugosc) {
                shouldErase = true;
                break;
            }
        }
        if (!shouldErase) {
            localResult.push_back(generatedData[i]);
        }
    }
}

void removeMatchingCoordinates(std::vector<Address> &generatedData, const std::vector<Address> &toProcess)
{
   size_t chunkSize = generatedData.size() / numThreads;
    std::vector<std::thread> threads;
    std::vector<std::vector<Address>> results(numThreads);

    for (size_t i = 0; i < numThreads; ++i) {
        size_t start = i * chunkSize;
        size_t end = (i == numThreads - 1) ? generatedData.size() : start + chunkSize;

        threads.emplace_back(processChunk, std::cref(generatedData), std::cref(toProcess), 
                             std::ref(results[i]), start, end);
    }

    for (auto& thread : threads) {
        thread.join();
    }

    std::vector<Address> finalResult;
    for (const auto& localResult : results) {
        finalResult.insert(finalResult.end(), localResult.begin(), localResult.end());
    }

    generatedData = finalResult;


    std::sort(generatedData.begin(), generatedData.end(),
              [](const Address &a, const Address &b)
              {
                  return std::tie(a.szerokosc, a.dlugosc) < std::tie(b.szerokosc, b.dlugosc);
              });

    generatedData.erase(
        std::unique(generatedData.begin(), generatedData.end(),
                    [](const Address &a, const Address &b)
                    {
                        return a.szerokosc == b.szerokosc && a.dlugosc == b.dlugosc;
                    }),
        generatedData.end());
}


void printAddresses(const std::vector<Address> &addresses, const std::string &title)
{
    std::cout << title << ":\n";
    for (const auto &address : addresses)
    {
        std::cout << address.lp << ","
                  << address.dataPoczatku << ","
                  << address.dataKonca << ","
                  << address.sumaUbezpieczenia << ","
                  << address.odnowienia << ","
                  << address.ulica << ","
                  << address.kodPocztowy << ","
                  << address.miasto << ","
                  << address.wojewodztwo << ","
                  << address.kraj << ","
                  << address.reasekuracjaO << ","
                  << address.reasekuracjaF << ","
                  << address.szerokosc << ","
                  << address.dlugosc << ","
                  << address.flaga1 << ","
                  << address.flaga2 << ","
                  << address.nrwoj
                  << "\n";
    }
    std::cout << std::endl;
}

int cur_el = 0;
const Address &randomElement(const std::vector<Address> &wektor)
{

    return wektor[cur_el++ % wektor.size()];
}

int num_generated_data = 0;
int max_num_generated_data = 0;
int max_files = 0;
int cur_fileProcessed = 0;
int linesToConcatenate = 0;
int concatenated_lines = 0;
int loadedLines = 0;
int max_duplicates = 0;
int num_dupl = 0; 

std::vector<FileInfo> fileInfos;

void processData()
{
    auto start = std::chrono::high_resolution_clock::now();
    pqxx::connection c(
        "dbname=nominatim user=nominatim password=nominatim host=localhost "
        "port=5432");
    pqxx::work txn(c);
    std::cout << "Polaczony z " << c.dbname() << '\n';


    std::stringstream query;

    query << "SELECT * FROM (\n"
      << "    SELECT DISTINCT \n"
      << "        postcode, address,\n"
      << "        ST_Y(ST_Centroid(centroid)) AS lat,\n"
      << "        ST_X(ST_Centroid(centroid)) AS lon\n"
      << "    FROM \n"
      << "        placex\n"
      << "    WHERE \n"
      << "        address -> 'housenumber' IS NOT NULL AND \n"
      << "        address -> 'housenumber' != ''\n"
      << ") AS subquery\n"
      << "ORDER BY RANDOM()\n"
      << "LIMIT " << numberOfDataPoints << ";\n";

    logProgress("Generowanie danych...");
    pqxx::result r = txn.exec(query);
    
    max_num_generated_data = r.size();

    for (const auto &row : r)
    {
        std::string city, street, postcode, housenumber, place;

        size_t pos = 0;

        std::string input = row["address"].c_str();
        while (pos != std::string::npos)
        {
            size_t key_start = input.find('"', pos);
            if (key_start == std::string::npos)
                break;
            size_t key_end = input.find('"', key_start + 1);
            if (key_end == std::string::npos)
                break;

            std::string key = input.substr(key_start + 1, key_end - key_start - 1);

            size_t value_start = input.find('"', key_end + 1);
            if (value_start == std::string::npos)
                break;
            size_t value_end = input.find('"', value_start + 1);
            if (value_end == std::string::npos)
                break;

            std::string value =
                input.substr(value_start + 1, value_end - value_start - 1);

            if (key == "city")
            {
                city = value;
            }
            else if (key == "street")
            {
                street = value;
            }
            else if (key == "postcode")
            {
                postcode = value;
            }
            else if (key == "housenumber")
            {
                housenumber = value;
            }
            else if (key == "place")
            {
                place = value;
            }

            pos = value_end + 1;
        }

        if (city == "")
            city = place;
        std::string pcode_second = row["postcode"].c_str();

        double lat = row["lat"].as<double>();
        double lon = row["lon"].as<double>();

        std::string dawdawa = "";
        if (postcode != "")
        {
        }
        else if (pcode_second != "")
        {
            postcode = pcode_second;
        }

        auto [wojewodztwo, nr_woj] = getWojewodztwoMapa(postcode);

        addGeneratedData(Address{"", "", "", "", "", street + " " + housenumber, postcode, city, wojewodztwo,
                                 "", "", "", std::to_string(lat), std::to_string(lon), "", "", std::to_string(nr_woj)});

        num_generated_data++;
    }
    logProgress("Generowanie danych zakończone.");

    std::vector<fs::path> csvFiles = getCsvFiles(path);

    std::vector<std::string> allLines;
    // std::vector<FileInfo> fileInfos;
    std::string firstFileHeader;

    max_files = csvFiles.size(); 

    for (size_t fileIndex = 0; fileIndex < csvFiles.size(); ++fileIndex)
    {
        const auto &filePath = csvFiles[fileIndex];
        logProgress("Przetwarzanie pliku: " + filePath.string());

        cur_fileProcessed = fileIndex + 1;

        std::ifstream file(filePath);
        if (file.is_open())
        {
            FileInfo info;
            info.path = filePath;
            info.startIndex = allLines.size();
            info.lineCount = 0;

            std::string line;
            bool isFirstLine = true;
            while (std::getline(file, line))
            {
                if (fileIndex == 0)
                {

                    if (isFirstLine)
                    {
                        firstFileHeader = line;
                        isFirstLine = false;
                        allLines.push_back(line);
                    }
                    else
                    {
                        line = removeLastChar(line);

                        allLines.push_back(line);
                    }

                    info.lineCount++;
                }
                else
                {

                    if (isFirstLine)
                    {
                        isFirstLine = false;
                        continue;
                    }
                    line = removeLastChar(line);

                    allLines.push_back(line);
                    info.lineCount++;
                }
            }

            fileInfos.push_back(info);
            file.close();
        }
        else
        {
            std::cerr << "Nie można otworzyć pliku: " << filePath.string() << '\n';
        }
    }

    std::string csv_data;

    linesToConcatenate = allLines.size();
    for (const auto &line : allLines)
    {
        csv_data += line + "\n";

        concatenated_lines++;
    }
    // std::cout << csv_data;
    std::istringstream iss(csv_data);

    csvstream csv(iss);
    std::vector<std::pair<std::string, std::string>> row;

    int l = 0;
    loadedLines = 1;
    while (csv >> row)
    {
        std::string sklejone = "";
        std::string lp = row[0].second;
        std::string datapoczatku = row[1].second;
        std::string datakonca = row[2].second;
        std::string sumaUbezpieczenia = row[3].second;
        std::string odnowienia = row[4].second;
        std::string ulica = row[5].second;
        std::string kodPocztowy = row[6].second;
        std::string miasto = row[7].second;
        std::string wojewodztwo = row[8].second;
        std::string kraj = row[9].second;
        std::string reasekuracjaO = row[10].second;
        std::string reasekuracjaF = row[11].second;
        std::string szerokosc = row[12].second;
        std::string dlugosc = row[13].second;
        std::string flaga1 = row[14].second;
        std::string flaga2 = row[15].second;
        std::string nr_woj = row[16].second;

        add(Address{lp, datapoczatku, datakonca, sumaUbezpieczenia, odnowienia, ulica, kodPocztowy, miasto, wojewodztwo,
                    kraj, reasekuracjaO, reasekuracjaF, szerokosc, dlugosc, flaga1, flaga2, nr_woj});
        
        loadedLines++;
    }

    logProgress("Usuwanie duplikatów współrzędnych...");
    removeMatchingCoordinates(generatedData, toProcess);
    logProgress("Duplikaty usunięte.");

    std::vector<int> duplicates = findDuplicateCoordinates(toProcess);


    max_duplicates = duplicates.size();
    for (int index : duplicates)
    {

        const Address element = randomElement(generatedData);

        toProcess[index].ulica = element.ulica;
        toProcess[index].miasto = element.miasto;
        toProcess[index].kodPocztowy = element.kodPocztowy;
        toProcess[index].wojewodztwo = element.wojewodztwo;
        toProcess[index].szerokosc = element.szerokosc;
        toProcess[index].dlugosc = element.dlugosc;
        toProcess[index].nrwoj = element.nrwoj;

        num_dupl++;
    }

    for (size_t fileIndex = 0; fileIndex < fileInfos.size(); ++fileIndex)
    {
        const auto &info = fileInfos[fileIndex];
        fs::path newFilePath = info.path;
        newFilePath.replace_filename(info.path.stem().string() + "_final" + info.path.extension().string());
        
        logProgress("Zapisywanie do pliku: " + newFilePath.string());
        std::ofstream outFile(newFilePath);
        if (outFile.is_open())
        {

            outFile << firstFileHeader << '\n';

            if (fileIndex == 0)
            {
                for (size_t i = info.startIndex; i < info.startIndex + info.lineCount - 1; ++i)
                {

                    outFile << toProcess[i].toString() << '\n';
                }
            }
            else
            {
                for (size_t i = info.startIndex - 1; i < info.startIndex - 1 + info.lineCount; ++i)
                {

                    outFile << toProcess[i].toString() << '\n';
                }
            }
            outFile.close();
            std::cout << "Zapisano do pliku: " << newFilePath.string() << '\n';
        }
        else
        {
            std::cerr << "Nie można zapisać do pliku: " << newFilePath.string() << '\n';
        }
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;
    std::cout << red << "[INFO] " << green << "PROGRAM ZAKONCZYL SWOJE DZIALANIE. MOZESZ Z NIEGO WYJSC" << def << std::endl;
    std::cout << cyan << "Czas przetwarzania: " << elapsed.count() << " sekund." << deff << std::endl;
}


int main() {
bool exit = false;
   std::thread processingThread;

    while (!exit) {
        std::cout << "Wybierz opcję:\n";
        std::cout << "1. Rozpocznij przetwarzanie danych\n";
        std::cout << "2. Pokaż postep prac\n";
        std::cout << "3. Pokaż na jakie segmenty został podzielony kontener\n";
        std::cout << "4. Wyjdź\n";
        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: {
                if (!processingThread.joinable()) {
                    processingThread = std::thread(processData);
                } else {
                    std::cout << red << "Przetwarzanie danych jest już w toku.\n" << def;
                }
                break;
            }
            case 2:
                std::cout << magneta << "[STATUS] Postep w przetwarzaniu danych:" << def << std::endl;
                std::cout << yellow << "  - Liczba wygenerowanych danych: "     << std::to_string(num_generated_data) << "/"  << std::to_string(max_num_generated_data) << def << std::endl;
                std::cout << yellow << "  - Obecnie przetwarzany plik: "        << std::to_string(cur_fileProcessed) << "/"   << std::to_string(max_files) << def << std::endl;
                std::cout << yellow << "  - Budowanie wspolnego pliku: "        << std::to_string(concatenated_lines) << "/"  << std::to_string(linesToConcatenate) << def << std::endl;
                std::cout << yellow << "  - Wczytane rekordy z pliku: "         << std::to_string(loadedLines) << "/"         << std::to_string(linesToConcatenate) << def << std::endl;
                std::cout << yellow << "  - Liczba przetworzonych duplikatow: " << std::to_string(num_dupl) << "/"            << std::to_string(max_duplicates) << def << std::endl;
                break; 
            case 3:
                for (const auto &info : fileInfos)
                {
                    std::cout << blue << "Plik: " << info.path.string()
                            << ", Start Index: " << info.startIndex
                            << ", Line Count: " << info.lineCount << '\n' << def;
                }
                break;
            case 4:
                exit = true;
                break;
            default:
                std::cout << "Nieprawidłowa opcja, spróbuj ponownie.\n";
                break;
        }
    }

    return 0;
}


#################
#include <string>
#include <map>
#include <algorithm>
#include <utility>

std::pair<std::string, int> getWojewodztwoMapa(const std::string &kodPocztowy)
{
    int kod;
    try
    {
        // Usunięcie myślnika z kodu pocztowego
        std::string kodBezMyslnika = kodPocztowy;
        kodBezMyslnika.erase(std::remove(kodBezMyslnika.begin(), kodBezMyslnika.end(), '-'), kodBezMyslnika.end());

        // Sprawdzenie, czy kod pocztowy ma 5 cyfr
        if (kodBezMyslnika.length() != 5)
            throw std::invalid_argument("Nieprawidłowy format kodu pocztowego");

        // Konwersja pełnego kodu pocztowego na liczbę
        kod = std::stoi(kodBezMyslnika);
    }
    catch (const std::exception &e)
    {
        return {"Nieznane województwo", 0};
    }

    // Zakresy kodów pocztowych dla województw (aktualne na podstawie danych Poczty Polskiej)
    std::map<std::string, std::pair<int, int>> wojewodztwa = {
        {"Dolnośląskie", {50000, 59999}},
        {"Kujawsko-Pomorskie", {87000, 89999}},
        {"Lubelskie", {20000, 23999}},
        {"Lubuskie", {65000, 69999}},
        {"Łódzkie", {90000, 99999}},
        {"Małopolskie", {30000, 39999}},
        {"Mazowieckie", {0, 19999}},
        {"Opolskie", {45000, 49999}},
        {"Podkarpackie", {35000, 39999}},
        {"Podlaskie", {15000, 19999}},
        {"Pomorskie", {80000, 84999}},
        {"Śląskie", {40000, 49999}},
        {"Świętokrzyskie", {25000, 29999}},
        {"Warmińsko-Mazurskie", {10000, 19999}},
        {"Wielkopolskie", {60000, 64999}},
        {"Zachodniopomorskie", {70000, 79999}}
    };

    int numer = 1;
    for (const auto &woj : wojewodztwa)
    {
        if (kod >= woj.second.first && kod <= woj.second.second)
        {
            return {woj.first, numer};
        }
        ++numer;
    }

    return {"Nieznane województwo", 0};
}

const Address &randomElement(const std::vector<Address> &wektor)
{
    static std::random_device rd;
    static std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, wektor.size() - 1);
    int index = dis(gen);
    return wektor[index];
}

std::stringstream query;



std::stringstream query;

query << "WITH wojewodztwa AS (\n"
      << "  SELECT 'Dolnośląskie' AS nazwa, 50000 AS kod_min, 59999 AS kod_max UNION ALL\n"
      << "  SELECT 'Kujawsko-Pomorskie', 85000, 89999 UNION ALL\n"
      << "  SELECT 'Lubelskie', 20000, 23999 UNION ALL\n"
      << "  SELECT 'Lubuskie', 65000, 69999 UNION ALL\n"
      << "  SELECT 'Łódzkie', 90000, 99999 UNION ALL\n"
      << "  SELECT 'Małopolskie', 30000, 34999 UNION ALL\n"
      << "  SELECT 'Mazowieckie', 0, 19999 UNION ALL\n"
      << "  SELECT 'Opolskie', 45000, 49999 UNION ALL\n"
      << "  SELECT 'Podkarpackie', 35000, 39999 UNION ALL\n"
      << "  SELECT 'Podlaskie', 15000, 19999 UNION ALL\n"
      << "  SELECT 'Pomorskie', 80000, 84999 UNION ALL\n"
      << "  SELECT 'Śląskie', 40000, 44999 UNION ALL\n"
      << "  SELECT 'Świętokrzyskie', 25000, 29999 UNION ALL\n"
      << "  SELECT 'Warmińsko-Mazurskie', 10000, 14999 UNION ALL\n"
      << "  SELECT 'Wielkopolskie', 60000, 64999 UNION ALL\n"
      << "  SELECT 'Zachodniopomorskie', 70000, 78999\n"
      << "),\n"
      << "ranked_data AS (\n"
      << "  SELECT\n"
      << "    p.postcode,\n"
      << "    p.address,\n"
      << "    ST_Y(ST_Centroid(p.centroid)) AS lat,\n"
      << "    ST_X(ST_Centroid(p.centroid)) AS lon,\n"
      << "    w.nazwa AS wojewodztwo,\n"
      << "    ROW_NUMBER() OVER (PARTITION BY w.nazwa ORDER BY RANDOM()) AS rn\n"
      << "  FROM placex p\n"
      << "  JOIN wojewodztwa w ON\n"
      << "    (CAST(REGEXP_REPLACE(p.postcode, '[^0-9]', '', 'g') AS INTEGER) BETWEEN w.kod_min AND w.kod_max)\n"
      << "  WHERE\n"
      << "    p.address -> 'housenumber' IS NOT NULL AND\n"
      << "    p.address -> 'housenumber' != ''\n"
      << ")\n"
      << "SELECT *\n"
      << "FROM ranked_data\n"
      << "WHERE rn <= " << (numberOfDataPoints / 16) << ";\n";



Szerokosc	Dlugosc
49.062861	22.685559
49.099957	22.652291
49.100859	22.651784
49.100893	22.651752
49.103469	22.655114
49.103660	22.650449
49.103664	22.654851
49.104257	22.645277
49.117057	22.581234
49.124276	22.790451
49.124585	22.790624
49.130755	22.746150
49.131782	22.744762
49.138111	22.667622
49.142543	22.488306
49.142897	22.490394
49.143363	22.488970
49.145291	22.472278
49.145750	22.479577
49.146040	22.479462
49.146073	22.480386
49.148607	22.477398
49.148874	22.475588
49.150301	22.475483
49.150640	22.320722
49.150912	22.320298
49.150926	22.643854
49.151967	22.472229
49.152277	22.471905
49.153729	22.316545
49.153934	22.452707
49.153984	22.452228
49.154215	22.468545
49.154485	22.467457
49.154750	22.467255
49.155281	22.453569
49.155562	22.469068
